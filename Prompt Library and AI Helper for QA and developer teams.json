{
  "id": "7a7994bc-6061-45f6-b2ee-acad4a98e859",
  "name": "Prompt Library and AI Helper for QA and developer teams",
  "description": "Welcome to the Prompt Library and AI Helper!\nThis Glossary is designed as an almanac and productivity booster for developer and QA teams.\nOur goal is to provide a curated collection of reusable prompt samples and practical AI usage guidelines to help you save time and improve your workflow.\n\nIMPORTANT: Always review AI-generated content before using it in production.",
  "overview": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]",
  "tags": [
    "QA",
    "prompt",
    "Hackathon"
  ],
  "ownerId": "65a7eab64aa666fe660e227c",
  "createdBy": "65a7eab64aa666fe660e227c",
  "createdAt": "2025-06-30T16:29:39Z",
  "updatedBy": "6862bc0232ddd0130a954ce0",
  "updatedAt": "2025-07-09T09:13:32Z",
  "terms": [
    {
      "id": "12fc7fb2-236f-4402-bd10-b087826c7d72",
      "qlikId": "d8e603f3-1fa9-4658-ba1a-51dfc3a4e8b7",
      "name": "Access Control Test Generation",
      "description": "Your task is to generate comprehensive access control test cases based on the provided list of users, their roles, and entitlements.\n\n- Analyze the roles and entitlements for each user.\n- Generate test cases for all relevant combinations of roles and entitlements.\n- Ensure coverage of positive (allowed) and negative (denied) scenarios.\n- Format the output as code or structured data suitable for automated testing.\n- Clearly indicate which scenarios should pass and which should fail.\n\nReturn the generated test cases and a brief explanation.",
      "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"Example\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"You are an AI assistant specialized in software development and testing.\\nYour task is to generate comprehensive access control test cases based on the provided list of users, their roles, and entitlements.\\n\\nHere is the input:\\n---\\nusers = [\\n  {\\\"username\\\": \\\"alice\\\", \\\"roles\\\": [\\\"admin\\\"], \\\"entitlements\\\": [\\\"read\\\", \\\"write\\\", \\\"delete\\\"]},\\n  {\\\"username\\\": \\\"bob\\\", \\\"roles\\\": [\\\"user\\\"], \\\"entitlements\\\": [\\\"read\\\"]},\\n  {\\\"username\\\": \\\"carol\\\", \\\"roles\\\": [\\\"manager\\\"], \\\"entitlements\\\": [\\\"read\\\", \\\"write\\\"]}\\n]\\n---\\n\\nPlease generate test cases for all combinations of roles and entitlements, indicating which actions should be allowed or denied.\\n\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"Result:\"}]},{\"type\":\"code-block\",\"language\":\"python\",\"children\":[{\"text\":\"# Test cases for access control\\n\\ndef test_admin_can_delete():\\n    assert can_perform_action(\\\"alice\\\", \\\"delete\\\") == True  # admin has delete entitlement\\n\\ndef test_user_cannot_delete():\\n    assert can_perform_action(\\\"bob\\\", \\\"delete\\\") == False  # user does not have delete entitlement\\n\\ndef test_manager_can_write():\\n    assert can_perform_action(\\\"carol\\\", \\\"write\\\") == True  # manager has write entitlement\\n\\ndef test_user_can_read():\\n    assert can_perform_action(\\\"bob\\\", \\\"read\\\") == True  # user has read entitlement\\n\\ndef test_manager_cannot_delete():\\n    assert can_perform_action(\\\"carol\\\", \\\"delete\\\") == False  # manager does not have delete entitlement\\n\"}]}]",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "2025-07-09T09:12:00Z",
      "statusUpdatedBy": "6862bc0232ddd0130a954ce0",
      "tags": [],
      "stewards": [],
      "stewardDetails": [],
      "categories": [
        "70fc7fb2-236f-4402-bd10-b087826c7d72"
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-09T09:12:00Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "134add41-a8d6-46f7-8028-009750872fbe",
      "qlikId": "f7cff44d-4c79-4ea3-8d78-449f0a582abc",
      "name": "Add Logs to a Codebase",
      "description": "Add logging to a provided codebase.\n- Focus on printing variable values in the format 'name = value'.\n- Add logs to indicate the flow of the code with clear, identifiable steps (e.g., 'Step 1', 'Step 2', or action descriptions like 'Create', 'Push', etc.).\n- Use the preferred logging format: `flog.debug()`, `console.log()`, or `printf()` as appropriate for the language.\n\nReturn the updated code with added logs and a brief explanation.",
      "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"Example\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"Here is the code:\\n---\\ndef process_data(data):\\n    result = []\\n    for item in data:\\n        value = item * 2\\n        result.append(value)\\n    return result\\n---\\n\\nPlease add logs to trace variable values and code flow.\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"Result:\"}]},{\"type\":\"code-block\",\"language\":\"python\",\"children\":[{\"text\":\"def process_data(data):\\n    print(\\\"Step 1: Start processing data\\\")\\n    print(f\\\"data = {data}\\\")\\n    result = []\\n    for idx, item in enumerate(data):\\n        print(f\\\"Step 2: Processing item {idx}, item = {item}\\\")\\n        value = item * 2\\n        print(f\\\"value = {value}\\\")\\n        result.append(value)\\n    print(f\\\"Step 3: Finished processing, result = {result}\\\")\\n    return result\\n\"}]}]",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "2025-07-09T09:12:00Z",
      "statusUpdatedBy": "6862bc0232ddd0130a954ce0",
      "tags": [],
      "stewards": [],
      "stewardDetails": [],
      "categories": [
        "ed4add41-a8d6-46f7-8028-009750872fbe"
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-09T09:12:00Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "144add41-a8d6-46f7-8028-009750872fbe",
      "qlikId": "df583cf6-0aa2-4e68-9166-50d7daa04e2b",
      "name": "Code Explanation",
      "description": "You are an AI assistant specialized in software development.\nYour task is to explain this function/file in human language to a developer/QA with level of experience junior/standard/senior.",
      "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"Example\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"You are an AI assistant specialized in software development.\\nYour task is to explain this function in human language to a QA with level of experience senior.\\ntest(\\\"Delete a non existing item\\\", async () => {\\nconst fakeItemd = \\\"0123456789\\\";\\nconst resultDelete = await agent.delete(Endpoints.ITEMS.itemsById(fakeDataProductId));\\nexpect(resultDelete).toHaveStatus(404);\\nexpect(resultDelete.body).toHaveValidSchema(getFilePath(RESOURCES_SCHEMAS_PATH, \\\"ErrorResponse.json\\\"));\\nexpect(resultDelete.body.errors[0].detail).toEqual(\\nNo record of Item could be found with id ${fakeItemId}.,\\n);\\n});\\n\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"Result:\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"This test verifies the API's behavior when attempting to delete an item that does not exist in the system. As a senior QA, youâ€™ll recognize this as a negative test case designed to ensure robust error handling and clear communication to API consumers.\\n\\nStep-by-step explanation:\\n\\nSetup:\\nA fake item ID (\\\"0123456789\\\") is defined, which is guaranteed not to exist in the database.\\n\\nAction:\\nThe test sends a DELETE request to the endpoint responsible for deleting items, using the fake ID.\\n\\nValidation:\\n\\nIt asserts that the response status is 404 Not Found, confirming the API correctly identifies the absence of the resource.\\nIt checks that the response body matches the expected error schema (ErrorResponse.json), ensuring consistency in error reporting.\\nIt verifies the error message detail explicitly states that no item was found with the provided ID, which is important for transparency and troubleshooting.\\nWhy this matters:\\nThis test ensures the API gracefully handles invalid delete operations, returns meaningful error information, and adheres to contract (status code and schema). This is critical for downstream consumers and for maintaining predictable, reliable API behavior in production.\\n\"}]}]",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "2025-07-09T09:12:00Z",
      "statusUpdatedBy": "6862bc0232ddd0130a954ce0",
      "tags": [],
      "stewards": [],
      "stewardDetails": [],
      "categories": [
        "ed4add41-a8d6-46f7-8028-009750872fbe"
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-09T09:12:00Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "b2e1a9c4-7e2d-4e7a-9a1c-1e2f3d4c5b6a",
      "qlikId": "8505d78b-c486-48cb-bffa-53972b5bebe6",
      "name": "Code generation: Playwright page methods",
      "description": "You are an AI assistant specialized in software development.\nYour task is to write all the methods for the existing locators.\n\n- Create a method to click on a button when the locator name includes \"button\".\n- Create methods to fill and check the value when the locator name includes \"input\".\n- Create methods to activate the switch and check its status when the locator name includes \"switch\".\n- Create methods to click on a radio button and check its status when the locator name includes \"radio\".\n- Create methods to click on a check box and check its status when the locator name includes \"checkBox\".\n- Create a method that displays the tooltip by mouse hover and checks its label when the locator contains \"tooltips\".\n\nFor each method, add a log using the function fLog.stepName(), including the name of the class and the action of the method.\nUse clear valid names, explicit steps and avoid one-liners for better readability.",
      "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"Example\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"You are an AI assistant specialized in software development.\\nYour task is to write all the methods for the existing locators.\\n\\nCreate a method to click on a button when the locator name includes \\\"button\\\".\\n\\nCreate methods to fill and check the value when the locator name includes \\\"input\\\".\\n\\nCreate methods to activate the switch and check its status when the locator name includes \\\"switch\\\".\\n\\nCreate methods to click on a radio button and check its status when the locator name includes \\\"radio\\\".\\n\\nCreate methods to click on a check box and check its status when the locator name includes \\\"checkBox\\\".\\n\\nCreate a method that display the toolip by mouse hover and check it's label when the localor contains \\\"tooltips\\\"\\n\\nFor each method, add a log using the function fLog.stepName(), including the name of the class and the action of the method.\\n\\nUse clear validable names, explicit steps and avoids one-liners for better readability.\\n\\nexport class ItemsCreate extends Bass {\\nprivate readonly itemSwitch = this.layout.getByTestId(\\\"item.modal.switch\\\");\\n\\nprivate readonly openItemCheckbox = this.layout.getByTestId(\\\"item.modal.open-item.checkbox\\\");\\n\\nprivate readonly itemRadioButton = this.layout.getByTestId(\\\"items.modal.item.radio\\\");\\nprivate readonly itemInput = this.layout.locator(\\\"id=items.modal.item\\\");\\nprivate readonly createButton = this.layout.getByTestId(\\\"items.modal.create.button\\\");\\nprivate readonly cancelButton = this.layout.getByTestId(\\\"modal.buttons.close\\\");\\n}\\n\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"Result:\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"export class ItemsCreate extends Bass {\\n  private readonly layout = this.page.getByTestId(\\\"modal\\\");\\n  private readonly itemSwitch = this.layout.getByTestId(\\\"item.modal.switch\\\");\\n  private readonly openItemCheckbox = this.layout.getByTestId(\\\"item.modal.open-item.checkbox\\\");\\n  private readonly itemRadioButton = this.layout.getByTestId(\\\"items.modal.item.radio\\\");\\n  private readonly itemInput = this.layout.locator(\\\"id=items.modal.item\\\");\\n  private readonly createButton = this.layout.getByTestId(\\\"items.modal.create.button\\\");\\n  private readonly cancelButton = this.layout.getByTestId(\\\"modal.buttons.close\\\");\\n  private readonly itemTooltipLabel = this.layout.getByTestId(\\\"modal.tooltip.label\\\");\\n  private readonly itemTooltip = this.layout.getByTestId(\\\"modal.tooltip\\\");\\n\\n  // --- Methods for itemSwitch ---\\n  async activateItemSwitch() {\\n    fLog.stepName(\\\"ItemsCreate - Activating itemSwitch\\\");\\n    if (!(await this.itemSwitch.isChecked())) {\\n      await this.itemSwitch.click();\\n    }\\n  }\\n\\n  async isItemSwitchChecked(expected: boolean) {\\n    fLog.stepName(`ItemsCreate - Checking itemSwitch is checked: ${expected}`);\\n    if (expected) {\\n      await expect(this.itemSwitch).toBeChecked();\\n    } else {\\n      await expect(this.itemSwitch).not.toBeChecked();\\n    }\\n  }\\n\\n  // --- Methods for openItemCheckbox ---\\n  async clickOpenItemCheckbox() {\\n    fLog.stepName(\\\"ItemsCreate - Clicking openItemCheckbox\\\");\\n    await this.openItemCheckbox.click();\\n  }\\n\\n  async isOpenItemCheckboxChecked(expected: boolean) {\\n    fLog.stepName(`ItemsCreate - Checking openItemCheckbox is checked: ${expected}`);\\n    const checked = await this.openItemCheckbox.getAttribute(\\\"aria-checked\\\");\\n    expect(checked).toBe(expected.toString());\\n  }\\n\\n  // --- Methods for itemRadioButton ---\\n  async clickItemRadioButton() {\\n    fLog.stepName(\\\"ItemsCreate - Clicking itemRadioButton\\\");\\n    await this.itemRadioButton.click();\\n  }\\n\\n  async isItemRadioButtonChecked(expected: boolean) {\\n    fLog.stepName(`ItemsCreate - Checking itemRadioButton is checked: ${expected}`);\\n    if (expected) {\\n      await expect(this.itemRadioButton).toBeChecked();\\n    } else {\\n      await expect(this.itemRadioButton).not.toBeChecked();\\n    }\\n  }\\n\\n  // --- Methods for itemInput ---\\n  async fillItemInput(value: string) {\\n    fLog.stepName(`ItemsCreate - Filling itemInput with value: ${value}`);\\n    await this.itemInput.fill(value);\\n  }\\n\\n  async itemInputValueIs(expected: string) {\\n    fLog.stepName(`ItemsCreate - Checking itemInput value is: ${expected}`);\\n    await expect(this.itemInput).toHaveValue(expected);\\n  }\\n\\n  // --- Methods for createButton ---\\n  async clickCreateButton() {\\n    fLog.stepName(\\\"ItemsCreate - Clicking createButton\\\");\\n    await this.createButton.click();\\n  }\\n\\n  // --- Methods for cancelButton ---\\n  async clickCancelButton() {\\n    fLog.stepName(\\\"ItemsCreate - Clicking cancelButton\\\");\\n    await this.cancelButton.click();\\n  }\\n\\n  async showItemTooltipAndCheckLabel(expected: string) {\\n    fLog.stepName(\\\"ItemsCreate - Displaying tooltip and checking label\\\");\\n    await this.itemTooltip.hover();\\n    await expect(this.itemTooltipLabel).toHaveText(expected);\\n  }\\n}\\n\"}]}]",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "2025-07-04T13:27:54Z",
      "statusUpdatedBy": "6862bc0232ddd0130a954ce0",
      "tags": [],
      "stewards": [
        {
          "userId": "65a7eab64aa666fe660e227c",
          "email": "maud.bartlett@qlik.com",
          "name": "Maud Bartlett"
        }
      ],
      "stewardDetails": [
        {
          "userId": "65a7eab64aa666fe660e227c",
          "email": "maud.bartlett@qlik.com",
          "name": "Maud Bartlett"
        }
      ],
      "categories": [
        "70fc7fb2-236f-4402-bd10-b087826c7d72"
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-04T13:27:54Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "3bd83fdf-08b6-4936-bb78-ded18842e178",
      "qlikId": "556fe5d0-599e-4feb-aeaf-978e584d93d2",
      "name": "Code optimization",
      "description": "You are an AI assistant specialized in software development.\nYour task is to rewrite this function/file to made it more readable and clear for users.\nImproved structure and comments\nUse clear valid names, explicit steps and avoids one-liners for better readability.",
      "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"  test(`Deactivate a Item`, async () => {\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"    await createDefaulItemAndActivateIt();\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"    // Deactivation\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"    const resultDeactivation = await agent.post(Endpoints.ITEMS.deactivateItem(item.copy.id));\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"    expect(resultDeactivation).toHaveStatus(200);\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"    const resultGetMain = await getItemtById(agent, item.main.id);\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"    expect(resultGetMain.activated).toEqual(false);\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"    const resultGetCopy = await getItemById(agent, item.copy.id);\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"    expect(resultGetCopy).toBeNull();\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"  });\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"Result:\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"test('Deactivate an Item', async () => {\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"  // Step 1: Create and activate a default item for testing\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"  await createDefaulItemAndActivateIt();\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"  // Step 2: Deactivate the item using the copy's ID\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"  const deactivationResponse = await agent.post(\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"    Endpoints.ITEMS.deactivateItem(item.copy.id)\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"  );\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"  expect(deactivationResponse).toHaveStatus(200);\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"  // Step 3: Retrieve the main item and verify it is deactivated\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"  const mainItem = await getItemtById(agent, item.main.id);\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"  expect(mainItem.activated).toEqual(false);\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"  // Step 4: Attempt to retrieve the copy item and verify it no longer exists\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"  const copyItem = await getItemById(agent, item.copy.id);\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"  expect(copyItem).toBeNull();\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"});\"}]}]",
      "abbreviation": "",
      "status": "verified",
      "statusUpdatedAt": "2025-06-30T16:29:56Z",
      "statusUpdatedBy": "65a7eab64aa666fe660e227c",
      "tags": [],
      "stewards": [
        {
          "userId": "65a7eab64aa666fe660e227c",
          "email": "maud.bartlett@qlik.com",
          "name": "Maud Bartlett"
        }
      ],
      "stewardDetails": [
        {
          "userId": "65a7eab64aa666fe660e227c",
          "email": "maud.bartlett@qlik.com",
          "name": "Maud Bartlett"
        }
      ],
      "categories": [
        "a7d07bc2-b40d-4225-9277-f245c94c7855"
      ],
      "createdBy": "65a7eab64aa666fe660e227c",
      "createdAt": "2025-06-30T16:29:39Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "c7f2e1b2-9e2a-4b6a-8e7e-123456789abc",
      "qlikId": "24bfed47-f805-4ef8-8387-35e221a7a52f",
      "name": "Code refactoring",
      "description": "You are an AI assistant specialized in software development and code quality.\nYour task is to refactor the provided code by:\n\n- Renaming variables to improve clarity and follow naming conventions.\n- Checking if variable names accurately reflect their purpose and usage.\n- Suggesting better names where appropriate.\n- Ensuring consistency and readability throughout the code.\n\nReturn the refactored code and a brief explanation of the changes.\nDo not change the logic of the code, only the refactoring.",
      "relatedInformation": "",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "2025-07-04T12:39:10Z",
      "statusUpdatedBy": "6862bc0232ddd0130a954ce0",
      "tags": [],
      "stewards": [
        {
          "userId": "65a7eab64aa666fe660e227c",
          "email": "maud.bartlett@qlik.com",
          "name": "Maud Bartlett"
        }
      ],
      "stewardDetails": [
        {
          "userId": "65a7eab64aa666fe660e227c",
          "email": "maud.bartlett@qlik.com",
          "name": "Maud Bartlett"
        }
      ],
      "categories": [
        "a7d07bc2-b40d-4225-9277-f245c94c7855"
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-04T12:39:10Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "15fc7fb2-236f-4402-bd10-b087826c7d72",
      "qlikId": "b850e008-da10-4b3f-a97d-2109eb655caf",
      "name": "Complete Unit Test Writing",
      "description": "I want you to act as a Senior full stack {Typescript, Java, Groovy, ...} developer.\nOnce I provide the code, your task is to develop a comprehensive suite of unit tests for a provided codebase.\n\nTo write the test, I will provide you with\n- api culturist\n- code base\n- screenshot\n- drawing\n- ticket\n- acceptance criteria\n\nFollow these guidelines for an effective testing process:\n\n1. **Understand the Codebase**: Analyze the code thoroughly, step by step. Identify \nthe possible ambiguity or missing information such as constants, type definitions, conditions, external APIs,\netc and provide steps, and questions and seek clarification for better code understanding. \nOnly proceed to the next step once you have analyzed the codebase fully.\n\n2. **Testing framework**: For this task, use an **{chai, jest, junit, etc.,}** testing framework.\n\n3. **Design Small, Focused Tests**: Each unit test should focus on one functionality,\nenhancing readability and ease of debugging. Ensure each test is isolated and does not depend on others.\nSimulate the behavior of external dependencies using mock objects to increase the reliability and speed of your tests.\n\n4. For mock use the **{sinon, jest, etc.,}** library.\n\n5. **Structure and Name Your Tests Well**: Your tests should follow a clear structure and \nuse descriptive names to make their purpose clear.   \nFollow the provided test structure from file:\n\n   * [typescript](test-sample.ts)\n   * [java](test-sample.java)\n\nYour additional guidelines:\n\n1. **Implement the AAA Pattern**: Implement the Arrange-Act-Assert (AAA) paradigm in each test,\nestablishing necessary preconditions and inputs (Arrange), executing the object or method under test (Act),\nand asserting the results against the expected outcomes (Assert).\n\n2. **Test the Happy Path and Failure Modes**: Your tests should not only confirm that the code works under expected\nconditions (the 'happy path') but also how it behaves in failure modes.\n\n3. **Testing Edge Cases**: Go beyond testing the expected use cases and ensure edge cases are also tested to catch\npotential bugs that might not be apparent in regular use.\n\n4. **Avoid Logic in Tests**: Strive for simplicity in your tests, steering clear of logic such as loops and\nconditionals, as these can signal excessive test complexity.\n\n5. **Leverage TypeScript's Type System**: Leverage static typing to catch potential bugs before they occur,\npotentially reducing the number of tests needed.\n\n6. **Handle Asynchronous Code Effectively**: If your test cases involve promises and asynchronous operations,\nensure they are handled correctly.\n\n7. **Write Complete Test Cases**: Avoid writing test cases as mere examples or code skeletons.\nYou have to write a complete set of tests. They should effectively validate the functionality under test.\n\nYour ultimate objective is to create a robust, complete test suite for the provided TypeScript code.",
      "relatedInformation": "",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "2025-07-09T09:12:00Z",
      "statusUpdatedBy": "6862bc0232ddd0130a954ce0",
      "tags": [],
      "stewards": [],
      "stewardDetails": [],
      "categories": [
        "70fc7fb2-236f-4402-bd10-b087826c7d72"
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-09T09:12:00Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "164add41-a8d6-46f7-8028-009750872fbe",
      "qlikId": "e0593059-9271-4913-8bc0-98e1d7b6d3e3",
      "name": "Debugging Assistance",
      "description": "You are an AI assistant specialized in software development and debugging.\nYour task is to analyze the provided code, input/output, and error encountered to help identify the root cause of the issue.\n\n- Review the code and the error message or unexpected output.\n- Compare the actual behavior with the described functional requirement.\n- Suggest possible causes and steps to resolve the issue.\n- Provide code corrections or debugging strategies if applicable.\n\nYou will be given:\n- The code snippet\n- The input and output (or error)\n- The supposed functional requirement",
      "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"Example\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"You are an AI assistant specialized in software development and debugging.\\nYour task is to analyze the provided code, input/output, and error encountered to help identify the root cause of the issue.\\n\\nHere is the code:\\n---\\ndef divide(a, b):\\n    return a / b\\n\\nprint(divide(10, 0))\\n---\\n\\nInput:\\n10, 0\\n\\nError encountered:\\nZeroDivisionError: division by zero\\n\\nSupposed functional requirement:\\nThe function should return the result of dividing a by b, but if b is zero, it should return None instead of raising an error.\\n\\nPlease analyze and suggest a fix.\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"Result:\"}]},{\"type\":\"code-block\",\"language\":\"python\",\"children\":[{\"text\":\"# Issue: The function does not handle division by zero, causing a ZeroDivisionError.\\n\\n# Suggested fix:\\ndef divide(a, b):\\n    if b == 0:\\n        return None\\n    return a / b\\n\"}]}]",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "2025-07-09T09:12:00Z",
      "statusUpdatedBy": "6862bc0232ddd0130a954ce0",
      "tags": [],
      "stewards": [],
      "stewardDetails": [],
      "categories": [
        "ed4add41-a8d6-46f7-8028-009750872fbe"
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-09T09:12:00Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "881922a4-c674-43c9-8617-f7a842b360eb",
      "qlikId": "7a25eb14-4c32-4886-9375-542f337c989e",
      "name": "Docstring documentation of existing code",
      "description": "- Complete missing or incomplete docstrings for the provided code.\n- Check that all docstrings accurately describe the function, parameters, and return values.\n- Ensure docstrings follow the project's style guide (e.g., Google, NumPy, or reStructuredText).\n- Suggest improvements for clarity, completeness, and consistency.\nReturn the updated code with improved docstrings and a summary of changes.",
      "relatedInformation": "",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "2025-06-30T16:29:39Z",
      "statusUpdatedBy": "65a7eab64aa666fe660e227c",
      "tags": [],
      "stewards": [
        {
          "userId": "65a7eab64aa666fe660e227c",
          "email": "maud.bartlett@qlik.com",
          "name": "Maud Bartlett"
        }
      ],
      "stewardDetails": [
        {
          "userId": "65a7eab64aa666fe660e227c",
          "email": "maud.bartlett@qlik.com",
          "name": "Maud Bartlett"
        }
      ],
      "categories": [
        "0139141d-634b-4da3-b2aa-e3f43a4ec19a"
      ],
      "createdBy": "65a7eab64aa666fe660e227c",
      "createdAt": "2025-06-30T16:29:39Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:13:32Z"
    },
    {
      "id": "a745599f-d315-4c76-82f5-148a28058172",
      "qlikId": "a745599f-d315-4c76-82f5-148a28058172",
      "name": "Junit Creation",
      "description": "Can you create junit test in FILE_TO_EDIT\nto cover the methods in FILE_TO_COVER\nUse the same test framework than FILE_INSPIRE",
      "relatedInformation": "",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "2025-07-04T13:28:26Z",
      "statusUpdatedBy": "6862bc0232ddd0130a954ce0",
      "tags": [],
      "stewards": [
        {
          "userId": "6862bc0232ddd0130a954ce0",
          "email": "axel.catoire@qlik.com",
          "name": "Axel Catoire"
        }
      ],
      "stewardDetails": [
        {
          "userId": "6862bc0232ddd0130a954ce0",
          "email": "axel.catoire@qlik.com",
          "name": "Axel Catoire"
        }
      ],
      "categories": [
        "70fc7fb2-236f-4402-bd10-b087826c7d72"
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-04T13:28:26Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "17fc7fb2-236f-4402-bd10-b087826c7d72",
      "qlikId": "521f8465-54f4-414d-8aea-3aed5399f7b3",
      "name": "List Endpoints Without Tests",
      "description": "Your task is to analyze the provided codebase or API specification and:\n\n- List all API endpoints.\n- Identify which endpoints do not have corresponding unit or integration tests.\n- Suggest test cases for uncovered endpoints.\n- Format the output as a checklist or table for easy tracking.\n\nReturn the list of endpoints, missing tests, and suggestions for coverage.",
      "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"Example\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"You are an AI assistant specialized in software development and testing.\\nYour task is to list all API endpoints and identify which ones lack tests.\\n\\nHere is the API specification:\\n---\\nGET /users\\nPOST /users\\nGET /users/{id}\\nDELETE /users/{id}\\n---\\n\\nHere are the existing tests:\\n---\\ntest_get_users\\ntest_post_users\\n---\\n\\nPlease list endpoints without tests and suggest test cases.\\n\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"Result:\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"| Endpoint           | Test Exists      | Suggested Test Name      |\\n|--------------------|-----------------|-------------------------|\\n| GET /users         | Yes              | test_get_users          |\\n| POST /users        | Yes              | test_post_users         |\\n| GET /users/{id}    | No               | test_get_user_by_id     |\\n| DELETE /users/{id} | No               | test_delete_user_by_id  |\\n\\n**Endpoints missing tests:**\\n- GET /users/{id}\\n- DELETE /users/{id}\\n\\n**Suggested test cases:**\\n- test_get_user_by_id: Should retrieve a user by ID and handle not found.\\n- test_delete_user_by_id: Should delete a user by ID and handle not found.\\n\"}]}]",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "2025-07-09T09:12:00Z",
      "statusUpdatedBy": "6862bc0232ddd0130a954ce0",
      "tags": [],
      "stewards": [],
      "stewardDetails": [],
      "categories": [
        "70fc7fb2-236f-4402-bd10-b087826c7d72"
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-09T09:12:00Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "328ddc9b-e98e-46c6-96db-45c13ccd7478",
      "qlikId": "328ddc9b-e98e-46c6-96db-45c13ccd7478",
      "name": "Replace usage of a code portion",
      "description": "Can you replace the usage of BEFORE with AFTER\nYou can inspire from the usage in INSPIRE",
      "relatedInformation": "",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "2025-07-04T13:43:46Z",
      "statusUpdatedBy": "6862bc0232ddd0130a954ce0",
      "tags": [],
      "stewards": [
        {
          "userId": "6862bc0232ddd0130a954ce0",
          "email": "axel.catoire@qlik.com",
          "name": "Axel Catoire"
        }
      ],
      "stewardDetails": [
        {
          "userId": "6862bc0232ddd0130a954ce0",
          "email": "axel.catoire@qlik.com",
          "name": "Axel Catoire"
        }
      ],
      "categories": [
        "a7d07bc2-b40d-4225-9277-f245c94c7855"
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-04T13:43:46Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "18fc7fb2-236f-4402-bd10-b087826c7d72",
      "qlikId": "7d5e466f-4ba4-4264-9d39-b6d5012cfd4b",
      "name": "Test Review",
      "description": "You are an AI assistant specialized in software development and testing.\nYour task is to review the provided unit tests for the following:\n\n- Check if the test names accurately describe the test content and intent.\n- Identify any missing or redundant test cases.\n- Assess if the tests cover both positive and negative scenarios.\n- Suggest improvements for clarity, structure, and maintainability.\n- Ensure that assertions are meaningful and relevant.\n- Check for coverage of edge cases.\n- Highlight any inconsistencies or anti-patterns.\n- Find duplicate tests or similar logic that can be consolidated.\n\nProvide a summary of issues found and actionable suggestions for improvement.",
      "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"Example\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"You are an AI assistant specialized in software development and testing.\\nYour task is to review the provided unit tests for the following:\\n\\n- Check if the test names accurately describe the test content and intent.\\n- Identify any missing or redundant test cases.\\n- Assess if the tests cover both positive and negative scenarios.\\n- Suggest improvements for clarity, structure, and maintainability.\\n- Ensure that assertions are meaningful and relevant.\\n- Check for coverage of edge cases.\\n- Highlight any inconsistencies or anti-patterns.\\n- Find duplicate tests or similar logic that can be consolidated.\\n\\nProvide a summary of issues found and actionable suggestions for improvement.\\n\\nHere are the unit tests to review:\\n---\\ndef test_add_positive_numbers():\\n    assert add(2, 3) == 5\\n\\ndef test_add_negative_numbers():\\n    assert add(-2, -3) == -5\\n\\ndef test_add_zero():\\n    assert add(0, 0) == 0\\n\\ndef test_add_large_numbers():\\n    assert add(1000000, 2000000) == 3000000\\n\\ndef test_add_returns_none():\\n    assert add(1, 2) is None\\n---\\n\\nPlease provide a summary of issues and suggestions.\\n\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"Result:\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"**Summary of Issues:**\\n- The test `test_add_returns_none` does not match its name or expected behavior; adding 1 and 2 should not return None.\\n- No tests for mixed positive and negative numbers (e.g., add(2, -3)).\\n- No tests for invalid input types (e.g., strings or None).\\n- All tests use hardcoded values; consider using parameterized tests for better coverage.\\n\\n**Suggestions:**\\n- Rename or correct `test_add_returns_none` to reflect the actual expected behavior.\\n- Add tests for mixed sign inputs and invalid types.\\n- Use parameterized tests to reduce redundancy.\\n- Ensure all test names clearly describe the scenario being tested.\\n\"}]}]",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "2025-07-09T09:12:00Z",
      "statusUpdatedBy": "6862bc0232ddd0130a954ce0",
      "tags": [],
      "stewards": [],
      "stewardDetails": [],
      "categories": [
        "70fc7fb2-236f-4402-bd10-b087826c7d72"
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-09T09:12:00Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "19fc7fb2-236f-4402-bd10-b087826c7d72",
      "qlikId": "8e048b7d-dfb9-4327-ac1a-fdd10360ea99",
      "name": "Test Tagging Review",
      "description": "You are an AI assistant specialized in software development and testing.\nYour task is to review and tag the provided test cases.\n\n- Check that each test case has at least one tag.\n- Ensure at least one test is tagged as \"smoke\".\n- Verify that each tag is correct and matches the test's purpose.\n- Confirm that all tags are from the provided allowed list.\n- Suggest improvements or corrections if tags are missing, incorrect, or not in the allowed list.\n\nReturn a summary of issues and suggestions for improvement.",
      "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"Example\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"You are an AI assistant specialized in software development and testing.\\nYour task is to review and tag the provided test cases.\\n\\nAllowed tags: smoke, regression, integration, unit, performance\\n\\nHere are the test cases:\\n---\\ndef test_login_success():  # tags: smoke, regression\\n    ...\\n\\ndef test_login_failure():  # tags: regression\\n    ...\\n\\ndef test_api_performance():  # tags: perf\\n    ...\\n\\ndef test_data_integration():  # tags: integration\\n    ...\\n---\\n\\nPlease check the tags for each test, ensure at least one smoke test, and verify all tags are from the allowed list. Suggest corrections if needed.\\n\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"Result:\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"**Issues found:**\\n- `test_api_performance` uses tag \\\"perf\\\" which is not in the allowed list. Should be \\\"performance\\\".\\n- All tests except `test_login_success` are missing the \\\"smoke\\\" tag.\\n- All other tags are correct.\\n\\n**Suggestions:**\\n- Change \\\"perf\\\" to \\\"performance\\\" for `test_api_performance`.\\n- Consider tagging at least one more critical test as \\\"smoke\\\" if appropriate.\\n- Ensure all tags are from the allowed list: smoke, regression, integration, unit, performance.\\n\"}]}]",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "2025-07-09T09:12:00Z",
      "statusUpdatedBy": "6862bc0232ddd0130a954ce0",
      "tags": [],
      "stewards": [],
      "stewardDetails": [],
      "categories": [
        "70fc7fb2-236f-4402-bd10-b087826c7d72"
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-09T09:12:00Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "20fc7fb2-236f-4402-bd10-b087826c7d72",
      "qlikId": "f37a9048-f7ae-4b79-ad15-33eb77a92c55",
      "name": "Test data generation for unit tests",
      "description": "You are an AI assistant specialized in software development.\nYour task is to generate test data for unit tests.\n\nThe output format is {json, csv, yaml, ...}.\n\nThe output shall {include, not include } errors in data (type, value, etc.).\n\nThe date shall use a specific format {ISO 8601, RFC 3339, custom format}.",
      "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"You are an AI assistant specialized in software development.\\\\\\\\nYour task is to generate test data for unit tests.\\\\\\\\n\\\\\\\\nThe output format is a mysql command to make a table.\\\\\\\\nThe output shall {include,} errors in data (type, value, etc.).\\\\\\\\nUse a identified name for errors elements.\\\\\\\\n\\\\\\\\nThe test data shall be a 10 user table using all mysql data types with 5 users containing errors.\\\\\\\\n\\\\\\\"}]},{\\\\\\\"type\\\\\\\":\\\\\\\"paragraph\\\\\\\",\\\\\\\"children\\\\\\\":[{\\\\\\\"text\\\\\\\":\\\\\\\"Result:\\\\\\\"}]},{\\\\\\\"type\\\\\\\":\\\\\\\"code-block\\\\\\\",\\\\\\\"language\\\\\\\":\\\\\\\"sql\\\\\\\",\\\\\\\"children\\\\\\\":[{\\\\\\\"text\\\\\\\":\\\\\\\"CREATE TABLE user (\\\\\\\\n  id INT PRIMARY KEY,\\\\\\\\n  username VARCHAR(50),\\\\\\\\n  email VARCHAR(100),\\\\\\\\n  age TINYINT,\\\\\\\\n  balance DECIMAL(10,2),\\\\\\\\n  is_active BOOLEAN,\\\\\\\\n  created_at DATETIME,\\\\\\\\n  last_login TIMESTAMP,\\\\\\\\n  profile_picture BLOB,\\\\\\\\n  preferences JSON,\\\\\\\\n  birth_date DATE,\\\\\\\\n  login_time TIME,\\\\\\\\n  uuid BINARY(16),\\\\\\\\n  website_url TEXT,\\\\\\\\n  rating FLOAT,\\\\\\\\n  status ENUM('active', 'inactive', 'banned')\\\\\\\\n);\\\\\\\\n\\\\\\\\nINSERT INTO user VALUES\\\\\\\\n  (1, 'alice', 'alice@example.com', 30, 1000.50, 1, '2023-01-01 10:00:00', '2023-01-01 10:00:00', NULL, '{\\\\\\\\\\\\\\\"theme\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"dark\\\\\\\\\\\\\\\"}', '1990-05-15', '08:30:00', UNHEX('550e8400e29b41d4a716446655440000'), 'https://alice.com', 4.5, 'active'),\\\\\\\\n  (2, 'bob', 'bob@example.com', 28, 200.00, 0, '2023-02-01 12:00:00', '2023-02-01 12:00:00', NULL, '{\\\\\\\\\\\\\\\"theme\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"light\\\\\\\\\\\\\\\"}', '1985-10-20', '09:45:00', UNHEX('550e8400e29b41d4a716446655440001'), 'https://bob.com', 3.7, 'inactive'),\\\\\\\\n  (3, 'carol', 'carol@example.com', 35, 150.75, 1, '2023-03-01 14:00:00', '2023-03-01 14:00:00', NULL, '{\\\\\\\\\\\\\\\"theme\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"blue\\\\\\\\\\\\\\\"}', '1992-03-10', '11:20:00', UNHEX('550e8400e29b41d4a716446655440002'), 'https://carol.com', 4.2, 'banned'),\\\\\\\\n  (4, 'dave', 'dave@example.com', 40, 500.00, 1, '2023-04-01 16:00:00', '2023-04-01 16:00:00', NULL, '{\\\\\\\\\\\\\\\"theme\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"green\\\\\\\\\\\\\\\"}', '1980-07-25', '10:15:00', UNHEX('550e8400e29b41d4a716446655440003'), 'https://dave.com', 2.1, 'active'),\\\\\\\\n  (5, 'eve', 'eve@example.com', 22, 300.00, 0, '2023-05-01 18:00:00', '2023-05-01 18:00:00', NULL, '{\\\\\\\\\\\\\\\"theme\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"red\\\\\\\\\\\\\\\"}', '1998-11-30', '13:00:00', UNHEX('550e8400e29b41d4a716446655440004'), 'https://eve.com', 3.9, 'inactive'),\\\\\\\\n\\\\\\\\n  (6, 'error_age', 'error_age@example.com', 256, 100.00, 1, '2023-06-01 20:00:00', '2023-06-01 20:00:00', NULL, '{\\\\\\\\\\\\\\\"theme\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"yellow\\\\\\\\\\\\\\\"}', '1995-06-15', '15:00:00', UNHEX('550e8400e29b41d4a716446655440005'), 'https://errorage.com', 2.5, 'active'), -- ERROR_AGE: age out of TINYINT range\\\\\\\\n  (7, 'error_balance', 'error_balance@example.com', 27, 'notanumber', 1, '2023-07-01 22:00:00', '2023-07-01 22:00:00', NULL, '{\\\\\\\\\\\\\\\"theme\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"purple\\\\\\\\\\\\\\\"}', '1993-09-21', '16:30:00', UNHEX('550e8400e29b41d4a716446655440006'), 'https://errorbalance.com', 3.1, 'inactive'), -- ERROR_BALANCE: balance not a number\\\\\\\\n  (8, 'error_email', 'error[at]example.com', 31, 400.00, 1, '2023-08-01 23:00:00', '2023-08-01 23:00:00', NULL, '{\\\\\\\\\\\\\\\"theme\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"orange\\\\\\\\\\\\\\\"}', '1991-12-12', '17:45:00', UNHEX('550e8400e29b41d4a716446655440007'), 'https://erroremail.com', 4.0, 'banned'), -- ERROR_EMAIL: invalid email format\\\\\\\\n  (9, 'error_status', 'error_status@example.com', 29, 250.00, 1, '2023-09-01 08:00:00', '2023-09-01 08:00:00', NULL, '{\\\\\\\\\\\\\\\"theme\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"pink\\\\\\\\\\\\\\\"}', '1996-04-18', '19:10:00', UNHEX('550e8400e29b41d4a716446655440008'), 'https://errorstatus.com', 2.8, 'unknown'), -- ERROR_STATUS: invalid ENUM value\\\\\\\\n  (10, 'error_datetime', 'error_datetime@example.com', 33, 350.00, 1, 'invalid-date', '2023-10-01 09:00:00', NULL, '{\\\\\\\\\\\\\\\"theme\\\\\\\\\\\\\\\":true}', '1994-08-22', '25:61:00', UNHEX('550e8400e29b41d4a716446655440009'), 'https://errordatetime.com', 'NaN', 'active'); -- ERROR_DATETIME: invalid date, preferences type, login_time, rating type\"}]}]",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "2025-07-09T09:12:00Z",
      "statusUpdatedBy": "6862bc0232ddd0130a954ce0",
      "tags": [],
      "stewards": [],
      "stewardDetails": [],
      "categories": [
        "70fc7fb2-236f-4402-bd10-b087826c7d72"
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-09T09:12:00Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "21fc7fb2-236f-4402-bd10-b087826c7d72",
      "qlikId": "0cd29be3-90da-481a-91a3-8aec030703e9",
      "name": "Unit Test Skeleton from Template",
      "description": "You are an AI assistant specialized in software development and testing.\nYour task is to write a comprehensive skeleton for a suite of unit tests for a provided codebase.\n\n- Use the appropriate template for the specified language (TypeScript, Java, Groovy, etc.).\n- Ensure the skeleton covers setup, teardown, and at least one example test case.\n- Follow best practices for structure and naming.\n- Leave placeholders for test logic and assertions.\n\nReturn the generated test skeleton and a brief explanation.",
      "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"Example\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"You are an AI assistant specialized in software development and testing.\\nYour task is to write a unit test skeleton for a TypeScript codebase.\\n\\nUse the following template file: \\n    * [typescript](test-sample.ts)\\n    * [java](test-sample.java)\\n    * ...\\n\\nHere is the code to test:\\n---\\nfunction add(a: number, b: number): number {\\n  return a + b;\\n}\\n---\\n\\nPlease generate a unit test skeleton.\\n\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"Result:\"}]},{\"type\":\"code-block\",\"language\":\"typescript\",\"children\":[{\"text\":\"// test-sample.ts\\n\\nimport { add } from './add';\\n\\ndescribe('add', () => {\\n  beforeEach(() => {\\n    // Setup code if needed\\n  });\\n\\n  afterEach(() => {\\n    // Teardown code if needed\\n  });\\n\\n  it('should add two numbers', () => {\\n    // TODO: Add assertions\\n  });\\n});\\n\"}]}]",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "2025-07-09T09:12:00Z",
      "statusUpdatedBy": "6862bc0232ddd0130a954ce0",
      "tags": [],
      "stewards": [],
      "stewardDetails": [],
      "categories": [
        "70fc7fb2-236f-4402-bd10-b087826c7d72"
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-09T09:12:00Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "2239141d-634b-4da3-b2aa-e3f43a4ec19a",
      "qlikId": "2239141d-634b-4da3-b2aa-e3f43a4ec19a",
      "name": "Generate README.md",
      "description": "You are an AI assistant specialized in software development.\nYour task is to create a README markdown file suitable for this project under Git. The README should follow standard practice in terms of the layout of the README file.\n\nInclude sections such as Project Title, Description, Installation Instructions, Usage Instructions, Documentation with the list all files with an extension md in a table, License Information. Include the repository tree at the end of the file. Aim for a professional and informative tone, ensuring clarity and comprehensiveness.\n\nThe README should be formatted in Markdown, with proper headings, bullet points, and code blocks where necessary to ensure readability and usability.",
      "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"Example\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"You are an AI assistant specialized in software development.\\nYour task is to create a README markdown file suitable for this project under Git. The README should follow standard practice in terms of the layout of the README file.\\n\\nInclude sections such as Project Title, Description, Installation Instructions, Usage Instructions, Documentation with the list all files with an extension md in a table, License Information. Include the repository tree at the end of the file. Aim for a professional and informative tone, ensuring clarity and comprehensiveness.\\n\\nThe README should be formatted in Markdown, with proper headings, bullet points, and code blocks where necessary to ensure readability and usability.\\n\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"Result:\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"# Daily Prompt Repository & AI Helper\\n\\n## Description\\n\\nThe Daily Prompt Repository & AI Helper is a curated collection of reusable prompt samples and AI usage guidelines designed to enhance productivity for developer and QA teams. It provides ready-to-use prompts for code generation, testing, documentation, and more, helping you streamline your workflow and leverage AI tools effectively.\\n\\n## Installation Instructions\\n...\\n\"}]}]",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "",
      "statusUpdatedBy": "",
      "tags": [],
      "stewards": [],
      "stewardDetails": [],
      "categories": [
        "0139141d-634b-4da3-b2aa-e3f43a4ec19a"
      ],
      "createdBy": "",
      "createdAt": "",
      "updatedBy": "",
      "updatedAt": ""
    },
    {
      "id": "2339141d-634b-4da3-b2aa-e3f43a4ec19a",
      "qlikId": "2339141d-634b-4da3-b2aa-e3f43a4ec19a",
      "name": "Documentation Validation",
      "description": "You are an AI assistant specialized in software development and technical writing.\nYour task is to validate the provided documentation for accuracy, completeness, clarity, and consistency.\n\n- Check for missing or outdated information.\n- Identify unclear or ambiguous sections.\n- Suggest improvements for structure, grammar, and formatting.\n- Ensure all code samples are correct and up to date.\n- Highlight any inconsistencies or contradictions.\n\nProvide a summary of issues found and actionable suggestions for improvement.",
      "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"Example\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"You are an AI assistant specialized in software development and technical writing.\\nYour task is to validate the provided documentation for accuracy, completeness, clarity, and consistency.\\n\\n- Check for missing or outdated information.\\n- Identify unclear or ambiguous sections.\\n- Suggest improvements for structure, grammar, and formatting.\\n- Ensure all code samples are correct and up to date.\\n- Highlight any inconsistencies or contradictions.\\n\\nHere is the documentation to review:\\n---\\n# API Usage\\n\\nThis API allows you to create and manage users.\\n\\n## Endpoints\\n\\n- `POST /users` - Create a new user.\\n- `GET /users/{id}` - Get user by ID.\\n\\n## Example Request\\n\\n```json\\n{\\n  \\\"name\\\": \\\"John Doe\\\",\\n  \\\"email\\\": \\\"john@example.com\\\"\\n}\\n```\\n---\\n\\nPlease provide a summary of issues and suggestions.\\n\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"Result:\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"**Summary of Issues:**\\n- The documentation lacks information about authentication and required headers.\\n- No details on response format or error handling.\\n- The example request does not specify required/optional fields.\\n- No information about possible status codes.\\n- The endpoint descriptions are minimal and could be expanded.\\n\\n**Suggestions:**\\n- Add authentication and authorization details.\\n- Include example responses and error messages.\\n- Specify required and optional fields for each endpoint.\\n- Document possible HTTP status codes and their meanings.\\n- Expand endpoint descriptions for clarity.\\n\"}]}]",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "",
      "statusUpdatedBy": "",
      "tags": [],
      "stewards": [],
      "stewardDetails": [],
      "categories": [
        "0139141d-634b-4da3-b2aa-e3f43a4ec19a"
      ],
      "createdBy": "",
      "createdAt": "",
      "updatedBy": "",
      "updatedAt": ""
    },
    {
      "id": "2439141d-634b-4da3-b2aa-e3f43a4ec19a",
      "qlikId": "2439141d-634b-4da3-b2aa-e3f43a4ec19a",
      "name": "Ticket Review",
      "description": "You are an AI assistant specialized in software development and security review.\nYour task is to review the provided ticket for:\n\n- Explaining any CVE (Common Vulnerabilities and Exposures) providing a resume of the issue.\n- Identifying and describing the associated risks.\n- Searching for the usage of the affected component or pattern in the codebase to assess and adapt to the risk.\n- Suggesting mitigation or remediation steps if necessary.\n- Provide definition of ready to ensure the issue can be started.\n- Provide a list of acceptance criteria to ensure the issue is resolved.\n- Provide a definition of done to ensure the issue is fully completed.\n\nReturn a summary of findings and actionable recommendations.",
      "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"Example\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"You are an AI assistant specialized in software development and security review.\\nYour task is to review the provided ticket for CVE references, risk identification, and codebase usage.\\n\\nHere is the ticket:\\n---\\nTitle: Update library X due to CVE-2023-12345\\n\\nDescription:\\nThe project uses library X version 1.2.3, which is affected by CVE-2023-12345. This vulnerability allows remote attackers to execute arbitrary code via a crafted payload.\\n\\n---\\n\\nPlease:\\n- Explaining any CVE (Common Vulnerabilities and Exposures) providing a resume of the issue.\\n- Identifying and describing the associated risks.\\n- Searching for the usage of the affected component or pattern in the codebase to assess and adapt to the risk.\\n- Suggesting mitigation or remediation steps if necessary.\\n- Provide definition of ready to ensure the issue can be started.\\n- Provide a list of acceptance criteria to ensure the issue is resolved.\\n- Provide a definition of done to ensure the issue is fully completed.\\n\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"Result:\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"Here is a structured review of the provided ticket concerning **CVE-2023-12345**:\\n\\n---\\n\\n### **1. CVE Explanation and Summary**\\n\\n**CVE-2023-12345** (hypothetical for this example) describes a **remote code execution (RCE)** vulnerability in **library X version 1.2.3**, which allows an attacker to execute arbitrary code by sending a **crafted payload**. This typically results from:\\n\\n* Insecure deserialization.\\n* Unvalidated input being interpreted by an unsafe parser.\\n* Unsafe reflection or scripting interfaces.\\n\\n**Severity:** High (likely CVSS 8.0+ if RCE with network access)\\n**Exploitability:** High â€” requires only network access and specially crafted data.\\n**Impact:** Full compromise of system integrity and potential data breach.\\n\\n---\\n\\n### **2. Associated Risks**\\n\\n* **Remote Code Execution**: Attacker can run arbitrary code on the host, leading to potential full control of the system.\\n* **Lateral Movement**: Once compromised, attacker can pivot to other internal services or databases.\\n* **Data Exfiltration or Destruction**: Attacker can access or delete sensitive data.\\n* **Service Disruption**: May result in Denial of Service (DoS) or persistent malware.\\n\\n---\\n\\n### **3. Codebase Usage Assessment**\\n\\n#### What to search in the codebase:\\n\\n1. **Direct dependencies**:\\n    * `pom.xml`, `build.gradle`, `package.json`, etc. for:\\n\\n      ```xml\\n      <dependency>\\n        <groupId>com.example</groupId>\\n        <artifactId>library-x</artifactId>\\n        <version>1.2.3</version>\\n      </dependency>\\n      ```\\n\\n2. **Transitive dependencies**:\\n    * Use `mvn dependency:tree`, `gradle dependencies`, or `npm ls` to find transitive inclusion of library X.\\n\\n3. **Dangerous usage patterns**:\\n    * Look for:\\n\\n      ```java\\n      new XDeserializer().deserialize(userInput);\\n      scriptEngine.eval(userInput);\\n      ```\\n    * Untrusted data passed to parsing APIs from the vulnerable library.\\n\\n4. **Definition of Ready**\\n\\n    To begin this ticket, the following must be clear and confirmed:\\n    \\n    * [ ] Identify exact **fixed version** of library X to upgrade to.\\n    * [ ] Determine **locations of usage** (direct/transitive) in the codebase.\\n    * [ ] Assess whether any **test coverage** exists for library usage.\\n    * [ ] Check if other systems/packages are indirectly affected by the change (e.g., via shared modules).\\n\\n5. **Acceptance Criteria**\\n\\n    * [ ] Library X is upgraded to a **non-vulnerable version**.\\n    * [ ] All occurrences of the vulnerable version in dependency files are removed.\\n    * [ ] All deserialization or dynamic input-handling usage of the library is **audited**.\\n    * [ ] No runtime errors or test regressions after upgrade.\\n    * [ ] A **test case or sandbox test** exists to confirm that malicious payloads no longer lead to RCE.\\n    * [ ] Risk assessment is documented in the ticket or changelog.\\n\\n6. **Definition of Done**\\n\\n    * [ ] Patch version of library X is merged and deployed.\\n    * [ ] All CI/CD tests pass.\\n    * [ ] Security test or validation script verifies the vulnerability is no longer exploitable.\\n    * [ ] Documentation/changelog updated to reflect the change and mitigation of CVE-2023-12345.\\n    * [ ] Ticket includes references to the CVE, fixed version, and any upstream advisory.\\n    * [ ] Sign-off from Security and QA teams.\\n\"}]}]",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "",
      "statusUpdatedBy": "",
      "tags": [],
      "stewards": [],
      "stewardDetails": [],
      "categories": [
        "0139141d-634b-4da3-b2aa-e3f43a4ec19a"
      ],
      "createdBy": "",
      "createdAt": "",
      "updatedBy": "",
      "updatedAt": ""
    },
    {
      "id": "2539141d-634b-4da3-b2aa-e3f43a4ec19a",
      "qlikId": "2539141d-634b-4da3-b2aa-e3f43a4ec19a",
      "name": "Update README.md",
      "description": "You are an AI assistant specialized in software development.\nYour task is to update a README markdown file existing for this project under Git. The README should follow standard practice in terms of the layout of the README file.\n\nDon't remove existing sections, but complete them or correct them.\n\nAdd missing sections if needed.\n\nInclude sections such as Project Title, Description, Installation Instructions, Usage Instructions, Documentation with the list all files with an extension md in a table, License Information. Include the repository tree at the end of the file. Aim for a professional and informative tone, ensuring clarity and comprehensiveness.\n\nThe README should be formatted in Markdown, with proper headings, bullet points, and code blocks where necessary to ensure readability and usability.",
      "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"Example\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"You are an AI assistant specialized in software development.\\nYour task is to update a README markdown file existing for this project under Git. The README should follow standard practice in terms of the layout of the README file.\\n\\nDon't remove existing sections, but complete them or correct them.\\n\\nAdd missing sections if needed.\\n\\nInclude sections such as Project Title, Description, Installation Instructions, Usage Instructions, Documentation with the list all files with an extension md in a table, License Information. Include the repository tree at the end of the file. Aim for a professional and informative tone, ensuring clarity and comprehensiveness.\\n\\nThe README should be formatted in Markdown, with proper headings, bullet points, and code blocks where necessary to ensure readability and usability.\\n\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"Result:\"}]},{\"type\":\"code-block\",\"language\":\"markdown\",\"children\":[{\"text\":\"# Daily Prompt Repository & AI Helper\\n\\n## Description\\n\\nThe Daily Prompt Repository & AI Helper is a collection of reusable prompt samples and AI usage guidelines designed to enhance productivity for developer and QA teams. It provides ready-to-use prompts for code generation, testing, documentation, and more, helping you streamline your workflow and leverage AI tools effectively.\\n\\n---\\n\\n## Installation Instructions\\n\\n1. **Clone the repository:**\\n   ```sh\\n   git clone https://github.com/<your-org>/daily-prompt.git\\n   cd daily-prompt\\n   ```\\n\\n2. **(Optional) Install dependencies:**  \\n   If you plan to use or extend any scripts or test templates, install the necessary dependencies as described in the relevant files.\\n\\n---\\n\\n## Usage Instructions\\n\\n- **Browse Prompt Samples:**  \\n  Explore the Markdown files in the root and `unit-test/` directories for ready-to-use prompts covering unit test writing, test data generation, documentation validation, and more.\\n\\n- **Copy & Adapt Prompts:**  \\n  Copy the prompt samples into your own workflow, adapting them as needed for your specific use case.\\n\\n- **Unit Test Templates:**  \\n  Use the provided TypeScript and Java test templates in `unit-test/test-sample.ts` and `unit-test/test-sample.java` to standardize your test writing.\\n\\n---\\n\\n## Documentation\\n\\nBelow is a list of all Markdown (`.md`) files in this repository:\\n\\n| File Name            | Description                        |\\n|----------------------|------------------------------------|\\n| README.md            | Project overview and instructions  |\\n| generate-readme.md   | Prompt and example for README file |\\n\\n---\\n\\n## License Information\\n\\nThis project is licensed under the [MIT License](LICENSE).  \\nYou are free to use, modify, and distribute this project in accordance with the license terms.\\n\\n---\\n\\n## Repository Tree\\n\\n```\\ndaily-prompt/\\nâ”œâ”€â”€ generate-readme.md\\nâ”œâ”€â”€ unit-test/\\nâ”‚   â”œâ”€â”€ test-sample.ts\\nâ”‚   â””â”€â”€ test-sample.java\\nâ”œâ”€â”€ LICENSE\\nâ””â”€â”€\\n\"}]}]",
      "abbreviation": "",
      "status": "draft",
      "statusUpdatedAt": "",
      "statusUpdatedBy": "",
      "tags": [],
      "stewards": [],
      "stewardDetails": [],
      "categories": [
        "0139141d-634b-4da3-b2aa-e3f43a4ec19a"
      ],
      "createdBy": "",
      "createdAt": "",
      "updatedBy": "",
      "updatedAt": ""
    }
  ],
  "categories": [
    {
      "id": "ed4add41-a8d6-46f7-8028-009750872fbe",
      "qlikId": "ed4add41-a8d6-46f7-8028-009750872fbe",
      "name": "Debugging",
      "description": "",
      "stewardDetails": [
        {
          "userId": "6862bc0232ddd0130a954ce0",
          "email": "axel.catoire@qlik.com",
          "name": "Axel Catoire"
        }
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-04T12:40:59Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "0139141d-634b-4da3-b2aa-e3f43a4ec19a",
      "qlikId": "0139141d-634b-4da3-b2aa-e3f43a4ec19a",
      "name": "Documentation",
      "description": "",
      "stewardDetails": [
        {
          "userId": "6862bc0232ddd0130a954ce0",
          "email": "axel.catoire@qlik.com",
          "name": "Axel Catoire"
        }
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-04T12:40:50Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "a7d07bc2-b40d-4225-9277-f245c94c7855",
      "qlikId": "b598bbc7-4188-4c73-a1c6-aa4863062ecf",
      "name": "General codding",
      "description": "",
      "stewardDetails": [
        {
          "userId": "65a7eab64aa666fe660e227c",
          "email": "maud.bartlett@qlik.com",
          "name": "Maud Bartlett"
        }
      ],
      "createdBy": "65a7eab64aa666fe660e227c",
      "createdAt": "2025-06-30T16:29:39Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    },
    {
      "id": "70fc7fb2-236f-4402-bd10-b087826c7d72",
      "qlikId": "70fc7fb2-236f-4402-bd10-b087826c7d72",
      "name": "Test codding",
      "description": "",
      "stewardDetails": [
        {
          "userId": "6862bc0232ddd0130a954ce0",
          "email": "axel.catoire@qlik.com",
          "name": "Axel Catoire"
        }
      ],
      "createdBy": "6862bc0232ddd0130a954ce0",
      "createdAt": "2025-07-04T12:41:31Z",
      "updatedBy": "6862bc0232ddd0130a954ce0",
      "updatedAt": "2025-07-09T09:12:00Z"
    }
  ],
  "termTemplate": {
    "relatedInformation": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]"
  }
}